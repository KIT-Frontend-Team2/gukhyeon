Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 리액트는 선언형 프로그래밍 방식을 따르므로 이는 개발자가 
        뷰를 어떻게 그릴지 선언하는 방식으로
        개발자가 직접 상태를 변경하지 않고도
        뷰를 갱신할 수 있다. 이는 코드의 가독성과 유지보수 성을 높이는데 
        도움을 준다.

    - 리액트는 컴포넌트 기반 아키텍처를 따르며, 각 컴포넌트는 독립적으로 동작한다.
        이는 코드의 재사용성을 높이는데 도움을 주며, 각 컴포넌트의 역할을 명확히 구분하여 
        개발하는 것이 가능하다.
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 선언형 프로그래밍과 컴포넌트 기반 아키텍처를 통해 코드를 간결하고 재사용 가능하게
        작성할 수 있다. 이는 개발자의 생산성을 높이는데 도움을 준다.

    - 리액트는 상태(state)와 뷰(view) 를 분리하여 작성한다. 이를 통해 코드의
        가독성을 높이고 유지보수성을 향상시킬 수 있다.


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 리액트는 가상 돔을 사용하여 업데이트 된 부분만 실제 돔에 적용하기 때문에 
        불필요한 돔 조작을 최소화하고 성능을 향상시킬 수 있다.
    

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 재조정(reconciliation)


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 성능개선, 유지보수성 
    - 크로스 플랫폼 지원: 리액트 네이티브와 같은 다른 플랫폼에서도 가상 돔을 사용하여
        UI를 업데이트 할 수 있다.

Q6. (Q4)은 리액트에서 어느 순간에 실현될까요?
    - 컴포넌트 업데이트가 발생할 때마다 가상 돔과 돔 트리 비교하고, 바뀐 부분이 있다면 
        화면에 다시 그린다.

Q7. 훅 함수는 왜 만들게 되었을까요?
    - 리액트의 함수형 컴포넌트에서도 상태관리와 같은 기능을 쉽게 구현하기 위해 만들어졌다.
        클래스형 컴포넌트에서만 사용할 수 있었던 라이프사이클 메서드와 같은 기능을
        함수형 컴포넌트에서도 사용할 수 있도록 하기 위해 만들어졌다.

    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState : 컴포넌트 내에서 변수 상테(state)를 관리하기 위해 사용하는 Hook 함수. 
                    컴포넌트 내부에서 선언한다.
    (2) useRef : DOM 노드나 다른 값들을 참조하기 위해 사용하는 Hook 함수.
                    컴포넌트 내부에 선언한다.
    (3) useEffect : 컴포넌트가 마운트(컴포넌트가 처음 화면에 나타날 때)될 때, 언마운트(컴포넌트가 화면에서 사라질때)될 때
                        또는 특정 값이 업데이트될 때 원하는 동작을 수행할 수 있도록 해주는 Hook 함수.
                        컴포넌트 내부에서 선언한다.
    (4) useCallback : 함수를 새로 생성하지 않고, 메모리를 효율적으로 사용하고자 할 때 사용하는 Hook 함수.
                        컴포넌트 내부에서 선언한다.
    (5) useMemo : 함수의 리턴 값을 저장하여, 같은 값이 계속해서 나올 때 재계산을 하지 않고 저장된 값을 반환함으로써
                    성능을 최적하하는 Hook 함수.
                    컴포넌트 내부에서 선언한다.

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 여러 컴포넌트에서 공통적으로 사용되는 기능을 분리하여 재사용성을 높일 수 있다.
    - 특정 컴포넌트에서만 사용될 수 있는 로직이라면 해당 컴포넌트 내부에 로직을 작성하는 것이 좋다.
        그 외의 경우에는 커스텀 훅으로 분리하여 작성하는 것이 좋다.


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 프로젝트의 요구사항 파악
    - 컴포넌트 구조 설계
    - 상태 관리 방법 선택 

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - 리액트에서는 JSX 문법을 사용하여 가독성이 좋고, 컴포넌트 단위로 모듈화되어 있다.
        또한 가상 돔을 사용하여 성능이 최적화 되어 있다.
    - 바닐라 자바스크립트는 가독성이 떨어지고, 수동으로 DOM 요소를 조작해야 한다. 
        또한 상태 관리를 위해 별도의 라이브러리를 사용해야 한다.
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 코드의 유지보수와 컴포넌트의 재사용성을 높이기 위해 큰 컴포넌트를 작은 단위로 쪼개는 것이 좋다. 
        또한 각 컴포넌트는 자체적으로 존재해야 할 이유가 있으며, 그것이 분명한 컴포넌트를 만들어야 한다.
     - 컴포넌트를 나누는 기준은 해당 프로젝트의 복잡도나 개발자의 취향에 따라 다르기 때문이다.
        또한 프로젝트의 성격에 따라 다른 컴포넌트 구성이 필요할 수 있다. 
